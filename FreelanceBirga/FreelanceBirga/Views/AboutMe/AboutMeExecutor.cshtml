@model FreelanceBirga.Models.VM.ExecutorViewModel
<!DOCTYPE html>
<html>
<head>
    <title>Профиль исполнителя</title>
    <style>
        .profile-container {
            display: flex;
            flex-direction: column;
            gap: 20px;
            margin-top: 20px;
        }

        .username-section {
            font-size: 2rem;
            font-weight: bold;
            margin-bottom: 20px;
        }

        .main-content {
            display: flex;
            gap: 20px;
        }

        .left-section {
            flex: 2;
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .right-section {
            flex: 1;
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .description-section,
        .rating-section {
            background: #fff;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .tags-section,
        .reviews-section {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .tag {
            display: inline-block;
            background: #e9ecef;
            padding: 5px 10px;
            margin: 5px;
            border-radius: 15px;
            font-size: 0.9em;
            position: relative;
        }

        .tag-remove {
            margin-left: 5px;
            cursor: pointer;
            color: #dc3545;
        }

        .tag-input-container {
            margin-top: 10px;
            display: flex;
            gap: 5px;
        }

        .manage-tags-btn {
            margin-bottom: 10px;
        }

        .rating-value {
            font-size: 2rem;
            font-weight: bold;
            color: #ffc107;
        }

        .stars-container {
            font-size: 1.5rem;
            color: #ffc107;
            margin: 10px 0;
        }

        .review-item {
            margin-bottom: 15px;
            padding-bottom: 15px;
            border-bottom: 1px solid #eee;
        }

        .review-author {
            font-weight: bold;
            margin-bottom: 5px;
        }

        .review-rating {
            color: #ffc107;
            margin-bottom: 5px;
        }

        .review-text {
            margin-top: 5px;
        }

        .no-reviews {
            text-align: center;
            color: #6c757d;
            padding: 20px;
        }

        @@media (max-width: 768px) {
            .main-content {
                flex-direction: column;
            }

            .left-section,
            .right-section {
                flex: auto;
            }
        }
    </style>
</head>
<body>
    <div class="container mt-5">
        <div class="profile-container">
            <!-- Никнейм сверху -->
            <div class="username-section">
                @Model.Username
            </div>

            <!-- Основной контент: слева описание и рейтинг, справа теги и отзывы -->
            <div class="main-content">
                <div class="left-section">
                    <!-- Описание -->
                    <div class="description-section">
                        <h4>Описание</h4>
                        <p>@(Model.Description ?? "Нет описания")</p>
                    </div>

                    <!-- Рейтинг -->
                    <div class="rating-section">
                        <h4>Рейтинг</h4>
                        <div class="rating-value">@Model.Rating.ToString("0")/5</div>
                        <div class="stars-container">
                            @{
                                double ratingValue = Model.Rating;
                            }
                            @for (int i = 1; i <= 5; i++)
                            {
                                if (i <= ratingValue)
                                {
                                    <span>★</span>
                                }
                                else if (i - 0.5 <= ratingValue)
                                {
                                    <span>½</span>
                                }
                                else
                                {
                                    <span>☆</span>
                                }
                            }
                        </div>
                        <p>На основе @Model.ColRating оценок</p>
                    </div>
                </div>

                <div class="right-section">
                    <!-- Теги -->
                    <div class="tags-section">
                        <h4>Теги</h4>
                        <button id="manageTagsBtn" class="btn btn-primary manage-tags-btn">Управление тегами</button>

                        <div id="tagsViewMode">
                            @if (Model.Tags != null && Model.Tags.Any())
                            {
                                <div class="tags-container">
                                    @foreach (var tag in Model.Tags)
                                    {
                                        <span class="tag">@tag</span>
                                    }
                                </div>
                            }
                            else
                            {
                                <p>Теги не указаны</p>
                            }
                        </div>

                        <div id="tagsEditMode" style="display: none;">
                            <div class="tags-container" id="tagsContainer">
                                @if (Model.Tags != null && Model.Tags.Any())
                                {
                                    @foreach (var tag in Model.Tags)
                                    {
                                        <span class="tag">
                                            @tag
                                            <span class="tag-remove" data-tag="@tag">×</span>
                                        </span>
                                    }
                                }
                            </div>
                            <div class="tag-input-container">
                                <input type="text" id="newTagInput" class="form-control" placeholder="Новый тег">
                                <button id="addTagBtn" class="btn btn-success">+</button>
                            </div>
                            <div class="mt-3">
                                <button id="saveTagsBtn" class="btn btn-primary">Сохранить</button>
                                <button id="cancelTagsBtn" class="btn btn-secondary">Отмена</button>
                            </div>
                        </div>
                    </div>

                    <!-- Отзывы -->
                    <div class="reviews-section">
                        <h4>Отзывы</h4>
                        @if (Model.Reviews != null && Model.Reviews.Any())
                        {
                            foreach (var review in Model.Reviews)
                            {
                                <div class="review-item">
                                    <div class="review-author">@(review.ProfileName ?? "Аноним")</div>
                                    <div class="review-rating">
                                        @for (int i = 1; i <= 5; i++)
                                        {
                                            if (i <= review.Mark)
                                            {
                                                <span>★</span>
                                            }
                                            else
                                            {
                                                <span>☆</span>
                                            }
                                        }
                                    </div>
                                    <div class="review-text">@(review.Description ?? "Без описания")</div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="no-reviews">
                                <p>Пока нет отзывов</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function () {
            var originalTags = @Html.Raw(Json.Serialize(Model.Tags ?? new List<string>()));
            var currentTags = [...originalTags];

            $('#manageTagsBtn').click(function () {
                $('#tagsViewMode').hide();
                $('#tagsEditMode').show();
                $(this).hide();
            });

            $('#cancelTagsBtn').click(function () {
                currentTags = [...originalTags];
                renderTags();
                $('#tagsEditMode').hide();
                $('#tagsViewMode').show();
                $('#manageTagsBtn').show();
            });

            $('#addTagBtn').click(function () {
                addTag();
            });

            $('#newTagInput').keypress(function (e) {
                if (e.which == 13) {
                    addTag();
                }
            });

            $(document).on('click', '.tag-remove', function () {
                const tagToRemove = $(this).data('tag');
                currentTags = currentTags.filter(tag => tag !== tagToRemove);
                renderTags();
            });

            $('#saveTagsBtn').click(function () {
                $.ajax({
                    url: '@Url.Action("UpdateExecutorTags", "AboutMe")',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(currentTags),
                    success: function (response) {
                        console.log('Теги успешно отправлены на сервер');
                        originalTags = [...currentTags];
                        $('#tagsViewMode .tags-container').html(
                            currentTags.map(tag => `<span class="tag">${tag}</span>`).join('')
                        );
                        $('#tagsEditMode').hide();
                        $('#tagsViewMode').show();
                        $('#manageTagsBtn').show();

                        if (currentTags.length === 0) {
                            $('#tagsViewMode').html('<p>Теги не указаны</p>');
                        }
                    },
                    error: function () {
                        alert('Произошла ошибка при сохранении тегов');
                    }
                });
            });

            function addTag() {
                const newTag = $('#newTagInput').val().trim().toLowerCase();
                if (newTag && !currentTags.includes(newTag)) {
                    currentTags.push(newTag);
                    renderTags();
                    $('#newTagInput').val('');
                }
            }

            function renderTags() {
                $('#tagsContainer').html(
                    currentTags.map(tag => `
                                <span class="tag">
                                    ${tag}
                                    <span class="tag-remove" data-tag="${tag}">×</span>
                                </span>
                            `).join('')
                );
            }
        });
    </script>
</body>
</html>