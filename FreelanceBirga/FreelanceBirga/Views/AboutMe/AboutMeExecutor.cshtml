@model FreelanceBirga.Models.VM.ExecutorViewModel
<!DOCTYPE html>
<html>
<head>
    <title>Профиль исполнителя</title>
    <style>
        .profile-container {
            display: flex;
            gap: 20px;
            margin-top: 20px;
        }
        .card {
            flex: 3;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        .tags-panel {
            flex: 1;
            background: #f8f9fa;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            height: fit-content;
        }
        .card-header {
            font-size: 1.5rem;
        }
        .tag {
            display: inline-block;
            background: #e9ecef;
            padding: 5px 10px;
            margin: 5px;
            border-radius: 15px;
            font-size: 0.9em;
            position: relative;
        }
        .tag-remove {
            margin-left: 5px;
            cursor: pointer;
            color: #dc3545;
        }
        .tag-input-container {
            margin-top: 10px;
            display: flex;
            gap: 5px;
        }
        .manage-tags-btn {
            margin-bottom: 10px;
        }
        @@media (max-width: 768px) {
            .profile-container {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <div class="container mt-5">
        <div class="profile-container">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h2>Профиль исполнителя</h2>
                </div>
                <div class="card-body">
                    <div class="row mb-3">
                        <div class="col-md-2 font-weight-bold">Никнейм:</div>
                        <div class="col-md-10">@Model.Username</div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-2 font-weight-bold">Описание:</div>
                        <div class="col-md-10">@Model.Description</div>
                    </div>
                </div>
            </div>

            <div class="tags-panel">
                <h4>Теги</h4>
                <button id="manageTagsBtn" class="btn btn-primary manage-tags-btn">Управление тегами</button>

                <div id="tagsViewMode">
                    @if (Model.Tags != null && Model.Tags.Any())
                    {
                            <div class="tags-container">
                            @foreach (var tag in Model.Tags)
                            {
                                        <span class="tag">@tag</span>
                            }
                            </div>
                    }
                    else
                    {
                            <p>Теги не указаны</p>
                    }
                </div>

                <div id="tagsEditMode" style="display: none;">
                    <div class="tags-container" id="tagsContainer">
                        @if (Model.Tags != null && Model.Tags.Any())
                        {
                            @foreach (var tag in Model.Tags)
                            {
                                        <span class="tag">
                                    @tag
                                            <span class="tag-remove" data-tag="@tag">×</span>
                                        </span>
                            }
                        }
                    </div>
                    <div class="tag-input-container">
                        <input type="text" id="newTagInput" class="form-control" placeholder="Новый тег">
                        <button id="addTagBtn" class="btn btn-success">+</button>
                    </div>
                    <div class="mt-3">
                        <button id="saveTagsBtn" class="btn btn-primary">Сохранить</button>
                        <button id="cancelTagsBtn" class="btn btn-secondary">Отмена</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function() {
            var originalTags = @Html.Raw(Json.Serialize(Model.Tags ?? new List<string>()));
            var currentTags = [...originalTags];

            $('#manageTagsBtn').click(function() {
                $('#tagsViewMode').hide();
                $('#tagsEditMode').show();
                $(this).hide();
            });

            $('#cancelTagsBtn').click(function() {
                currentTags = [...originalTags];
                renderTags();
                $('#tagsEditMode').hide();
                $('#tagsViewMode').show();
                $('#manageTagsBtn').show();
            });

            $('#addTagBtn').click(function() {
                addTag();
            });

            $('#newTagInput').keypress(function(e) {
                if (e.which == 13) {
                    addTag();
                }
            });

            $(document).on('click', '.tag-remove', function() {
                const tagToRemove = $(this).data('tag');
                currentTags = currentTags.filter(tag => tag !== tagToRemove);
                renderTags();
            });

            $('#saveTagsBtn').click(function() { $.ajax({
            url: '@Url.Action("UpdateExecutorTags", "AboutMe")',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(currentTags), 
            success: function(response) {
            console.log('Теги успешно отправлены на сервер');
            originalTags = [...currentTags];
            $('#tagsViewMode .tags-container').html(
                currentTags.map(tag => `<span class="tag">${tag}</span>`).join('')
            );
            $('#tagsEditMode').hide();
            $('#tagsViewMode').show();
            $('#manageTagsBtn').show();

            if (currentTags.length === 0) {
                $('#tagsViewMode').html('<p>Теги не указаны</p>');
            }
        },
        error: function() {
            alert('Произошла ошибка при сохранении тегов');
        }
    });
});

            function addTag() {
                const newTag = $('#newTagInput').val().trim().toLowerCase();
                if (newTag && !currentTags.includes(newTag)) {
                    currentTags.push(newTag);
                    renderTags();
                    $('#newTagInput').val('');
                }
            }

            function renderTags() {
                $('#tagsContainer').html(
                    currentTags.map(tag => `
                        <span class="tag">
                            ${tag}
                            <span class="tag-remove" data-tag="${tag}">×</span>
                        </span>
                    `).join('')
                );
            }
        });
    </script>
</body>
</html>